using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using PollBall.Services;

namespace PollBall
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
            services.AddSingleton<IPollResultsService, PollResultsService>();
            services.AddMvc(options => options.EnableEndpointRouting = false);  
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IPollResultsService pollResults)
        {
            app.Use(async (context, next) =>
            {
                if (context.Request.Query.ContainsKey("favorite"))
                {
                    string selectedValue = context.Request.Query["favorite"];
                    SelectedGame selecteGame = (SelectedGame)Enum.Parse(typeof(SelectedGame), selectedValue, true);
                    pollResults.AddVote(selecteGame);
                    context.Response.Headers.Add("content-type", "text/html");
                    byte[] text = Encoding.ASCII.GetBytes($"Thank you for submitting the pool. You may look at the pool results <a href='/?submitted=true'>Here</a>");
                    await context.Response.Body.WriteAsync(text);
                }
                else
                {
                    await next.Invoke();
                }
            });
            app.UseStaticFiles();

            app.UseMvcWithDefaultRoute();
            app.Run(async context =>
            {
                byte[] text = Encoding.ASCII.GetBytes($"This text generated by " +
                    $"the app.Run middleware. wwwroot folder path:  {env.WebRootPath}");
                await context.Response.Body.WriteAsync(text);
            });
        }
    }
}
